// <auto-generated/>
#pragma warning disable 1591
#pragma warning disable 0414
#pragma warning disable 0649
#pragma warning disable 0169

namespace grid_handle_prerender.Shared
{
    #line hidden
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Threading.Tasks;
    using Microsoft.AspNetCore.Components;
#nullable restore
#line 1 "/Users/akorenchikov/Development/blazor-projects/grid-handle-prerender/_Imports.razor"
using System.Net.Http;

#line default
#line hidden
#nullable disable
#nullable restore
#line 2 "/Users/akorenchikov/Development/blazor-projects/grid-handle-prerender/_Imports.razor"
using Microsoft.AspNetCore.Authorization;

#line default
#line hidden
#nullable disable
#nullable restore
#line 3 "/Users/akorenchikov/Development/blazor-projects/grid-handle-prerender/_Imports.razor"
using Microsoft.AspNetCore.Components.Authorization;

#line default
#line hidden
#nullable disable
#nullable restore
#line 4 "/Users/akorenchikov/Development/blazor-projects/grid-handle-prerender/_Imports.razor"
using Microsoft.AspNetCore.Components.Forms;

#line default
#line hidden
#nullable disable
#nullable restore
#line 5 "/Users/akorenchikov/Development/blazor-projects/grid-handle-prerender/_Imports.razor"
using Microsoft.AspNetCore.Components.Routing;

#line default
#line hidden
#nullable disable
#nullable restore
#line 6 "/Users/akorenchikov/Development/blazor-projects/grid-handle-prerender/_Imports.razor"
using Microsoft.AspNetCore.Components.Web;

#line default
#line hidden
#nullable disable
#nullable restore
#line 7 "/Users/akorenchikov/Development/blazor-projects/grid-handle-prerender/_Imports.razor"
using Microsoft.AspNetCore.Components.Web.Virtualization;

#line default
#line hidden
#nullable disable
#nullable restore
#line 8 "/Users/akorenchikov/Development/blazor-projects/grid-handle-prerender/_Imports.razor"
using Microsoft.JSInterop;

#line default
#line hidden
#nullable disable
#nullable restore
#line 9 "/Users/akorenchikov/Development/blazor-projects/grid-handle-prerender/_Imports.razor"
using grid_handle_prerender;

#line default
#line hidden
#nullable disable
#nullable restore
#line 10 "/Users/akorenchikov/Development/blazor-projects/grid-handle-prerender/_Imports.razor"
using grid_handle_prerender.Shared;

#line default
#line hidden
#nullable disable
#nullable restore
#line 11 "/Users/akorenchikov/Development/blazor-projects/grid-handle-prerender/_Imports.razor"
using DevExpress.Blazor;

#line default
#line hidden
#nullable disable
#nullable restore
#line 1 "/Users/akorenchikov/Development/blazor-projects/grid-handle-prerender/Shared/TestParameters.razor"
using grid_handle_prerender.Pages;

#line default
#line hidden
#nullable disable
    public partial class TestParameters : Microsoft.AspNetCore.Components.ComponentBase
    {
        #pragma warning disable 1998
        protected override void BuildRenderTree(Microsoft.AspNetCore.Components.Rendering.RenderTreeBuilder __builder)
        {
        }
        #pragma warning restore 1998
#nullable restore
#line 9 "/Users/akorenchikov/Development/blazor-projects/grid-handle-prerender/Shared/TestParameters.razor"
       
    int counter = 0;
    [Parameter] public int Param1 { get; set; }
    [Parameter] public long Param4 { get; set; }
    [Parameter] public ComplexParameter Param2 { get; set; }
    [Parameter] public RecordParameter Param3 { get; set; }
    [CascadingParameter] public FetchData Owner { get; set; } 

    public override async Task SetParametersAsync(ParameterView view) {
        await base.SetParametersAsync(view);
        Console.WriteLine("SetParametersAsync called { Param1: " + 
            Param1.ToString() + ", Param2 = " + 
            Param2.ToString() + ", Param3 = " + 
            Param3?.ToString() + ", Param4 = " + 
            Param4.ToString() + ", counter = " + 
            counter.ToString() + "}");
    }

    public record RecordParameter {
        public int Field1 { get; }
        public RecordParameter(int field1) => Field1 = field1;
    }
    public readonly struct ComplexParameter : IEquatable<ComplexParameter>, IComparable<ComplexParameter> {
        public int Field1 { get; }

        public ComplexParameter(int field1) {
            Field1 = field1;
        }

        public override string ToString()
        {
            return "{ Field1: " + Field1.ToString() + " }";
        }

        public override int GetHashCode()
        {
            return Field1.GetHashCode();
        }
        public override bool Equals(object obj) {
            return obj is ComplexParameter other && other.Equals(this);
        }
        public bool Equals(ComplexParameter other) {
            return Field1 == other.Field1;
        }
        public static bool operator  ==(ComplexParameter left, ComplexParameter right) {
            return left.Field1 == right.Field1;
        } 
        public static bool operator  !=(ComplexParameter left, ComplexParameter right) {
            return !(left == right);
        }
        public int CompareTo(ComplexParameter other) {
            return Comparer<int>.Default.Compare(Field1, other.Field1);   
        }
    }    

#line default
#line hidden
#nullable disable
    }
}
#pragma warning restore 1591
